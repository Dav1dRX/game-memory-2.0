{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\David Maguire\\\\gaming\\\\src\\\\context\\\\GameContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect, useCallback } from 'react';\nimport { generateCards } from '../utils/gameUtils';\n\n// Constants\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MATCH_POINTS = 10;\nconst MIN_PENALTY = 2;\nconst DEFAULT_TIMER = 60;\nconst MAX_HIGH_SCORES = 10;\nconst initialState = {\n  isPlaying: false,\n  gameMode: null,\n  currentPlayer: 1,\n  players: {\n    1: {\n      name: 'Player 1',\n      score: 0,\n      matches: 0\n    },\n    2: {\n      name: 'Player 2',\n      score: 0,\n      matches: 0\n    }\n  },\n  cards: [],\n  selectedCards: [],\n  turnTimer: DEFAULT_TIMER,\n  timerStarted: false,\n  gameOver: false,\n  winner: null,\n  highScores: JSON.parse(localStorage.getItem('memory-game-scores') || '{\"single\":[], \"multi\":[]}')\n};\nexport const GameContext = /*#__PURE__*/createContext();\nexport const useGame = () => {\n  _s();\n  const context = useContext(GameContext);\n  if (!context) {\n    throw new Error('useGame must be used within a GameProvider');\n  }\n  return context;\n};\n_s(useGame, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nconst gameReducer = (state, action) => {\n  switch (action.type) {\n    case 'START_GAME':\n      {\n        const {\n          mode\n        } = action.payload;\n        return {\n          ...initialState,\n          isPlaying: true,\n          gameOver: false,\n          gameMode: mode,\n          cards: generateCards(),\n          highScores: state.highScores,\n          players: {\n            1: {\n              id: 1,\n              name: mode === 'single' ? 'Player' : 'Player 1',\n              score: 0,\n              matches: 0\n            },\n            ...(mode === 'multi' && {\n              2: {\n                id: 2,\n                name: 'Player 2',\n                score: 0,\n                matches: 0\n              }\n            })\n          }\n        };\n      }\n    case 'RESET_GAME':\n      {\n        return {\n          ...initialState,\n          gameMode: state.gameMode,\n          highScores: state.highScores\n        };\n      }\n    case 'SELECT_CARD':\n      {\n        if (state.selectedCards.length >= 2) return state;\n        const newState = {\n          ...state,\n          selectedCards: [...state.selectedCards, action.payload]\n        };\n        if (!state.timerStarted) {\n          newState.timerStarted = true;\n        }\n        return newState;\n      }\n    case 'CHECK_MATCH':\n      {\n        const [first, second] = state.selectedCards;\n        const isMatch = first.value === second.value;\n        const currentScore = state.players[state.currentPlayer].score;\n        const penaltyPoints = Math.min(currentScore, MIN_PENALTY);\n        const updatedCards = state.cards.map(card => isMatch && (card.id === first.id || card.id === second.id) ? {\n          ...card,\n          matched: true\n        } : card);\n        const allMatched = updatedCards.every(card => card.matched);\n        const updatedState = {\n          ...state,\n          cards: updatedCards,\n          players: {\n            ...state.players,\n            [state.currentPlayer]: {\n              ...state.players[state.currentPlayer],\n              score: currentScore + (isMatch ? MATCH_POINTS : -penaltyPoints),\n              matches: isMatch ? state.players[state.currentPlayer].matches + 1 : state.players[state.currentPlayer].matches\n            }\n          },\n          currentPlayer: state.gameMode === 'multi' && !isMatch ? state.currentPlayer === 1 ? 2 : 1 : state.currentPlayer,\n          selectedCards: []\n        };\n        if (allMatched) {\n          return handleGameEnd(updatedState);\n        }\n        return updatedState;\n      }\n    case 'UPDATE_TIMER':\n      {\n        if (state.turnTimer <= 0) {\n          return handleGameEnd(state);\n        }\n        return {\n          ...state,\n          turnTimer: state.turnTimer - 1\n        };\n      }\n    case 'PLAY_AGAIN':\n      {\n        return {\n          ...initialState,\n          gameMode: state.gameMode,\n          highScores: state.highScores,\n          isPlaying: true,\n          cards: generateCards()\n        };\n      }\n    case 'SYNC_SCORES':\n      {\n        return {\n          ...state,\n          highScores: action.payload\n        };\n      }\n    default:\n      return state;\n  }\n};\nconst handleGameEnd = state => {\n  const currentPlayer = state.players[state.currentPlayer];\n  const winner = state.gameMode === 'multi' ? state.players[1].score > state.players[2].score ? state.players[1] : state.players[2] : currentPlayer;\n  const newScore = {\n    playerName: state.gameMode === 'single' ? 'You' : winner.name,\n    score: winner.score,\n    date: new Date().toISOString(),\n    mode: state.gameMode,\n    id: Date.now()\n  };\n  const savedScores = JSON.parse(localStorage.getItem('memory-game-scores') || '{\"single\":[], \"multi\":[]}');\n  const currentModeScores = savedScores[state.gameMode];\n  if (!currentModeScores.some(score => score.id === newScore.id)) {\n    currentModeScores.push(newScore);\n    currentModeScores.sort((a, b) => b.score - a.score);\n    savedScores[state.gameMode] = currentModeScores.slice(0, MAX_HIGH_SCORES);\n    localStorage.setItem('memory-game-scores', JSON.stringify(savedScores));\n  }\n  return {\n    ...state,\n    isPlaying: false,\n    gameOver: true,\n    winner: {\n      name: winner.name,\n      score: winner.score\n    },\n    highScores: savedScores\n  };\n};\nexport const GameProvider = ({\n  children\n}) => {\n  _s2();\n  const [state, dispatch] = useReducer(gameReducer, initialState);\n  const syncScores = useCallback(() => {\n    const savedScores = JSON.parse(localStorage.getItem('memory-game-scores') || '{\"single\":[], \"multi\":[]}');\n    dispatch({\n      type: 'SYNC_SCORES',\n      payload: savedScores\n    });\n  }, []);\n  useEffect(() => {\n    window.addEventListener('storage', syncScores);\n    syncScores(); // Initial load\n\n    return () => window.removeEventListener('storage', syncScores);\n  }, [syncScores]);\n  const value = {\n    state,\n    dispatch,\n    actions: {\n      startGame: mode => dispatch({\n        type: 'START_GAME',\n        payload: {\n          mode\n        }\n      }),\n      resetGame: () => dispatch({\n        type: 'RESET_GAME'\n      }),\n      selectCard: card => dispatch({\n        type: 'SELECT_CARD',\n        payload: card\n      }),\n      checkMatch: () => dispatch({\n        type: 'CHECK_MATCH'\n      }),\n      updateTimer: () => dispatch({\n        type: 'UPDATE_TIMER'\n      }),\n      playAgain: () => dispatch({\n        type: 'PLAY_AGAIN'\n      })\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(GameContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 236,\n    columnNumber: 5\n  }, this);\n};\n_s2(GameProvider, \"0LRbGU1gT3G5rX8GOyz+s0Gp2MU=\");\n_c = GameProvider;\nvar _c;\n$RefreshReg$(_c, \"GameProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","useCallback","generateCards","jsxDEV","_jsxDEV","MATCH_POINTS","MIN_PENALTY","DEFAULT_TIMER","MAX_HIGH_SCORES","initialState","isPlaying","gameMode","currentPlayer","players","name","score","matches","cards","selectedCards","turnTimer","timerStarted","gameOver","winner","highScores","JSON","parse","localStorage","getItem","GameContext","useGame","_s","context","Error","gameReducer","state","action","type","mode","payload","id","length","newState","first","second","isMatch","value","currentScore","penaltyPoints","Math","min","updatedCards","map","card","matched","allMatched","every","updatedState","handleGameEnd","newScore","playerName","date","Date","toISOString","now","savedScores","currentModeScores","some","push","sort","a","b","slice","setItem","stringify","GameProvider","children","_s2","dispatch","syncScores","window","addEventListener","removeEventListener","actions","startGame","resetGame","selectCard","checkMatch","updateTimer","playAgain","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/David Maguire/gaming/src/context/GameContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect, useCallback } from 'react';\r\nimport { generateCards } from '../utils/gameUtils';\r\n\r\n// Constants\r\nconst MATCH_POINTS = 10;\r\nconst MIN_PENALTY = 2;\r\nconst DEFAULT_TIMER = 60;\r\nconst MAX_HIGH_SCORES = 10;\r\n\r\nconst initialState = {\r\n  isPlaying: false,\r\n  gameMode: null,\r\n  currentPlayer: 1,\r\n  players: {\r\n    1: { name: 'Player 1', score: 0, matches: 0 },\r\n    2: { name: 'Player 2', score: 0, matches: 0 }\r\n  },\r\n  cards: [],\r\n  selectedCards: [],\r\n  turnTimer: DEFAULT_TIMER,\r\n  timerStarted: false,\r\n  gameOver: false,\r\n  winner: null,\r\n  highScores: JSON.parse(\r\n    localStorage.getItem('memory-game-scores') || \r\n    '{\"single\":[], \"multi\":[]}'\r\n  )\r\n};\r\n\r\nexport const GameContext = createContext();\r\n\r\nexport const useGame = () => {\r\n  const context = useContext(GameContext);\r\n  if (!context) {\r\n    throw new Error('useGame must be used within a GameProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nconst gameReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'START_GAME': {\r\n      const { mode } = action.payload;\r\n      return {\r\n        ...initialState,\r\n        isPlaying: true,\r\n        gameOver: false,\r\n        gameMode: mode,\r\n        cards: generateCards(),\r\n        highScores: state.highScores,\r\n        players: {\r\n          1: {\r\n            id: 1,\r\n            name: mode === 'single' ? 'Player' : 'Player 1',\r\n            score: 0,\r\n            matches: 0\r\n          },\r\n          ...(mode === 'multi' && {\r\n            2: {\r\n              id: 2,\r\n              name: 'Player 2',\r\n              score: 0,\r\n              matches: 0\r\n            }\r\n          })\r\n        }\r\n      };\r\n    }\r\n\r\n    case 'RESET_GAME': {\r\n      return {\r\n        ...initialState,\r\n        gameMode: state.gameMode,\r\n        highScores: state.highScores\r\n      };\r\n    }\r\n\r\n    case 'SELECT_CARD': {\r\n      if (state.selectedCards.length >= 2) return state;\r\n      \r\n      const newState = {\r\n        ...state,\r\n        selectedCards: [...state.selectedCards, action.payload]\r\n      };\r\n\r\n      if (!state.timerStarted) {\r\n        newState.timerStarted = true;\r\n      }\r\n\r\n      return newState;\r\n    }\r\n\r\n    case 'CHECK_MATCH': {\r\n      const [first, second] = state.selectedCards;\r\n      const isMatch = first.value === second.value;\r\n      const currentScore = state.players[state.currentPlayer].score;\r\n      const penaltyPoints = Math.min(currentScore, MIN_PENALTY);\r\n\r\n      const updatedCards = state.cards.map(card => \r\n        isMatch && (card.id === first.id || card.id === second.id)\r\n          ? { ...card, matched: true }\r\n          : card\r\n      );\r\n\r\n      const allMatched = updatedCards.every(card => card.matched);\r\n\r\n      const updatedState = {\r\n        ...state,\r\n        cards: updatedCards,\r\n        players: {\r\n          ...state.players,\r\n          [state.currentPlayer]: {\r\n            ...state.players[state.currentPlayer],\r\n            score: currentScore + (isMatch ? MATCH_POINTS : -penaltyPoints),\r\n            matches: isMatch ? state.players[state.currentPlayer].matches + 1 : state.players[state.currentPlayer].matches\r\n          }\r\n        },\r\n        currentPlayer: state.gameMode === 'multi' && !isMatch\r\n          ? (state.currentPlayer === 1 ? 2 : 1)\r\n          : state.currentPlayer,\r\n        selectedCards: []\r\n      };\r\n\r\n      if (allMatched) {\r\n        return handleGameEnd(updatedState);\r\n      }\r\n\r\n      return updatedState;\r\n    }\r\n\r\n    case 'UPDATE_TIMER': {\r\n      if (state.turnTimer <= 0) {\r\n        return handleGameEnd(state);\r\n      }\r\n      return { ...state, turnTimer: state.turnTimer - 1 };\r\n    }\r\n\r\n    case 'PLAY_AGAIN': {\r\n      return {\r\n        ...initialState,\r\n        gameMode: state.gameMode,\r\n        highScores: state.highScores,\r\n        isPlaying: true,\r\n        cards: generateCards(),\r\n      };\r\n    }\r\n\r\n    case 'SYNC_SCORES': {\r\n      return {\r\n        ...state,\r\n        highScores: action.payload\r\n      };\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst handleGameEnd = (state) => {\r\n  const currentPlayer = state.players[state.currentPlayer];\r\n  const winner = state.gameMode === 'multi'\r\n    ? state.players[1].score > state.players[2].score\r\n      ? state.players[1]\r\n      : state.players[2]\r\n    : currentPlayer;\r\n\r\n  const newScore = {\r\n    playerName: state.gameMode === 'single' ? 'You' : winner.name,\r\n    score: winner.score,\r\n    date: new Date().toISOString(),\r\n    mode: state.gameMode,\r\n    id: Date.now()\r\n  };\r\n\r\n  const savedScores = JSON.parse(\r\n    localStorage.getItem('memory-game-scores') ||\r\n    '{\"single\":[], \"multi\":[]}'\r\n  );\r\n\r\n  const currentModeScores = savedScores[state.gameMode];\r\n  if (!currentModeScores.some(score => score.id === newScore.id)) {\r\n    currentModeScores.push(newScore);\r\n    currentModeScores.sort((a, b) => b.score - a.score);\r\n    savedScores[state.gameMode] = currentModeScores.slice(0, MAX_HIGH_SCORES);\r\n    localStorage.setItem('memory-game-scores', JSON.stringify(savedScores));\r\n  }\r\n\r\n  return {\r\n    ...state,\r\n    isPlaying: false,\r\n    gameOver: true,\r\n    winner: {\r\n      name: winner.name,\r\n      score: winner.score\r\n    },\r\n    highScores: savedScores\r\n  };\r\n};\r\n\r\nexport const GameProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(gameReducer, initialState);\r\n\r\n  const syncScores = useCallback(() => {\r\n    const savedScores = JSON.parse(\r\n      localStorage.getItem('memory-game-scores') ||\r\n      '{\"single\":[], \"multi\":[]}'\r\n    );\r\n    dispatch({\r\n      type: 'SYNC_SCORES',\r\n      payload: savedScores\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('storage', syncScores);\r\n    syncScores(); // Initial load\r\n\r\n    return () => window.removeEventListener('storage', syncScores);\r\n  }, [syncScores]);\r\n\r\n  const value = {\r\n    state,\r\n    dispatch,\r\n    actions: {\r\n      startGame: (mode) => dispatch({ type: 'START_GAME', payload: { mode } }),\r\n      resetGame: () => dispatch({ type: 'RESET_GAME' }),\r\n      selectCard: (card) => dispatch({ type: 'SELECT_CARD', payload: card }),\r\n      checkMatch: () => dispatch({ type: 'CHECK_MATCH' }),\r\n      updateTimer: () => dispatch({ type: 'UPDATE_TIMER' }),\r\n      playAgain: () => dispatch({ type: 'PLAY_AGAIN' })\r\n    }\r\n  };\r\n\r\n  return (\r\n    <GameContext.Provider value={value}>\r\n      {children}\r\n    </GameContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}