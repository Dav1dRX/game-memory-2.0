{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\David Maguire\\\\gaming\\\\src\\\\context\\\\GameContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { generateCards } from '../utils/gameUtils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  isPlaying: false,\n  gameMode: null,\n  currentPlayer: 1,\n  players: {\n    1: {\n      name: 'Player 1',\n      score: 0,\n      matches: 0\n    },\n    2: {\n      name: 'Player 2',\n      score: 0,\n      matches: 0\n    }\n  },\n  cards: [],\n  selectedCards: [],\n  turnTimer: 60,\n  // Cambiado de 30 a 60 segundos\n  highScores: JSON.parse(localStorage.getItem('memory-game-scores') || '{\"single\":[], \"multi\":[]}')\n};\nexport const GameContext = /*#__PURE__*/createContext();\nexport const useGame = () => {\n  _s();\n  return useContext(GameContext);\n};\n_s(useGame, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nconst gameReducer = (state, action) => {\n  switch (action.type) {\n    case 'START_GAME':\n      return {\n        ...initialState,\n        isPlaying: true,\n        gameOver: false,\n        gameMode: action.payload.mode,\n        cards: generateCards(),\n        highScores: state.highScores,\n        players: {\n          1: {\n            id: 1,\n            name: action.payload.mode === 'single' ? 'Player' : 'Player 1',\n            score: 0,\n            matches: 0\n          },\n          ...(action.payload.mode === 'multi' && {\n            2: {\n              id: 2,\n              name: 'Player 2',\n              score: 0,\n              matches: 0\n            }\n          })\n        }\n      };\n    case 'RESET_GAME':\n      return {\n        ...initialState,\n        gameMode: state.gameMode,\n        highScores: state.highScores\n      };\n    case 'SELECT_CARD':\n      // Start timer on first card click\n      if (!state.timerStarted) {\n        return {\n          ...state,\n          timerStarted: true,\n          selectedCards: [action.payload]\n        };\n      }\n      if (state.selectedCards.length >= 2) return state;\n      return {\n        ...state,\n        selectedCards: [...state.selectedCards, action.payload]\n      };\n    case 'CHECK_MATCH':\n      const [first, second] = state.selectedCards;\n      const isMatch = first.value === second.value;\n      const currentScore = state.players[state.currentPlayer].score;\n      const matchPoints = 10;\n      const penaltyPoints = Math.min(currentScore, 2);\n      return {\n        ...state,\n        cards: state.cards.map(card => isMatch && (card.id === first.id || card.id === second.id) ? {\n          ...card,\n          matched: true\n        } : card),\n        players: {\n          ...state.players,\n          [state.currentPlayer]: {\n            ...state.players[state.currentPlayer],\n            score: currentScore + (isMatch ? matchPoints : -penaltyPoints),\n            matches: isMatch ? state.players[state.currentPlayer].matches + 1 : state.players[state.currentPlayer].matches\n          }\n        },\n        currentPlayer: state.gameMode === 'multi' && !isMatch ? state.currentPlayer === 1 ? 2 : 1 : state.currentPlayer,\n        selectedCards: []\n      };\n    case 'UPDATE_TIMER':\n      if (state.turnTimer <= 0) {\n        const currentPlayer = state.players[state.currentPlayer];\n        const newScore = {\n          playerName: state.gameMode === 'single' ? 'You' : currentPlayer.name,\n          score: currentPlayer.score,\n          date: new Date().toISOString(),\n          mode: state.gameMode,\n          id: Date.now() // Add unique ID to prevent duplicates\n        };\n\n        // Get existing scores\n        const savedScores = JSON.parse(localStorage.getItem('memory-game-scores') || '{\"single\":[], \"multi\":[]}');\n\n        // Check for duplicates and add new score\n        const currentModeScores = savedScores[state.gameMode];\n        if (!currentModeScores.some(score => score.id === newScore.id)) {\n          currentModeScores.push(newScore);\n          currentModeScores.sort((a, b) => b.score - a.score);\n          savedScores[state.gameMode] = currentModeScores.slice(0, 10);\n          localStorage.setItem('memory-game-scores', JSON.stringify(savedScores));\n        }\n        return {\n          ...state,\n          isPlaying: false,\n          gameOver: true,\n          winner: {\n            name: state.gameMode === 'single' ? 'You' : currentPlayer.name,\n            score: currentPlayer.score\n          },\n          highScores: savedScores\n        };\n      }\n      return {\n        ...state,\n        turnTimer: state.turnTimer - 1\n      };\n    case 'END_GAME':\n      const winner = state.gameMode === 'multi' ? state.players[1].score > state.players[2].score ? state.players[1] : state.players[2] : state.players[1];\n      const newScore = {\n        playerName: winner.name,\n        score: winner.score,\n        date: new Date().toISOString(),\n        mode: state.gameMode\n      };\n\n      // Save to localStorage\n      const savedScores = JSON.parse(localStorage.getItem('memory-game-scores') || '{\"single\":[], \"multi\":[]}');\n      savedScores[state.gameMode].push(newScore);\n      savedScores[state.gameMode].sort((a, b) => b.score - a.score);\n      savedScores[state.gameMode] = savedScores[state.gameMode].slice(0, 10);\n      localStorage.setItem('memory-game-scores', JSON.stringify(savedScores));\n      return {\n        ...state,\n        isPlaying: false,\n        gameOver: true,\n        winner: {\n          name: winner.name,\n          score: winner.score\n        },\n        highScores: savedScores\n      };\n    case 'PLAY_AGAIN':\n      return {\n        ...initialState,\n        gameMode: state.gameMode,\n        highScores: state.highScores,\n        isPlaying: true,\n        cards: generateCards()\n      };\n    case 'SYNC_SCORES':\n      return {\n        ...state,\n        highScores: action.payload\n      };\n    default:\n      return state;\n  }\n};\nexport const GameProvider = ({\n  children\n}) => {\n  _s2();\n  const [state, dispatch] = useReducer(gameReducer, initialState);\n\n  // Efecto para sincronizar puntajes\n  useEffect(() => {\n    const loadScores = () => {\n      const savedScores = JSON.parse(localStorage.getItem('memory-game-scores') || '{\"single\":[], \"multi\":[]}');\n      dispatch({\n        type: 'SYNC_SCORES',\n        payload: savedScores\n      });\n    };\n    window.addEventListener('storage', loadScores);\n    loadScores(); // Carga inicial\n\n    return () => window.removeEventListener('storage', loadScores);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(GameContext.Provider, {\n    value: {\n      state,\n      dispatch\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 218,\n    columnNumber: 5\n  }, this);\n};\n_s2(GameProvider, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n_c = GameProvider;\nvar _c;\n$RefreshReg$(_c, \"GameProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","generateCards","jsxDEV","_jsxDEV","initialState","isPlaying","gameMode","currentPlayer","players","name","score","matches","cards","selectedCards","turnTimer","highScores","JSON","parse","localStorage","getItem","GameContext","useGame","_s","gameReducer","state","action","type","gameOver","payload","mode","id","timerStarted","length","first","second","isMatch","value","currentScore","matchPoints","penaltyPoints","Math","min","map","card","matched","newScore","playerName","date","Date","toISOString","now","savedScores","currentModeScores","some","push","sort","a","b","slice","setItem","stringify","winner","GameProvider","children","_s2","dispatch","loadScores","window","addEventListener","removeEventListener","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/David Maguire/gaming/src/context/GameContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\r\nimport { generateCards } from '../utils/gameUtils';\r\n\r\nconst initialState = {\r\n  isPlaying: false,\r\n  gameMode: null,\r\n  currentPlayer: 1,\r\n  players: {\r\n    1: { name: 'Player 1', score: 0, matches: 0 },\r\n    2: { name: 'Player 2', score: 0, matches: 0 }\r\n  },\r\n  cards: [],\r\n  selectedCards: [],\r\n  turnTimer: 60, // Cambiado de 30 a 60 segundos\r\n  highScores: JSON.parse(\r\n    localStorage.getItem('memory-game-scores') || \r\n    '{\"single\":[], \"multi\":[]}'\r\n  )\r\n};\r\n\r\nexport const GameContext = createContext();\r\n\r\nexport const useGame = () => useContext(GameContext);\r\n\r\nconst gameReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'START_GAME':\r\n      return {\r\n        ...initialState,\r\n        isPlaying: true,\r\n        gameOver: false, \r\n        gameMode: action.payload.mode,\r\n        cards: generateCards(),\r\n        highScores: state.highScores, \r\n        players: {\r\n          1: {\r\n            id: 1,\r\n            name: action.payload.mode === 'single' ? 'Player' : 'Player 1',\r\n            score: 0,\r\n            matches: 0\r\n          },\r\n          ...(action.payload.mode === 'multi' && {\r\n            2: {\r\n              id: 2,\r\n              name: 'Player 2',\r\n              score: 0,\r\n              matches: 0\r\n            }\r\n          })\r\n        }\r\n      };\r\n\r\n    case 'RESET_GAME':\r\n      return {\r\n        ...initialState,\r\n        gameMode: state.gameMode,\r\n        highScores: state.highScores \r\n      };\r\n\r\n    case 'SELECT_CARD':\r\n      // Start timer on first card click\r\n      if (!state.timerStarted) {\r\n        return {\r\n          ...state,\r\n          timerStarted: true,\r\n          selectedCards: [action.payload]\r\n        };\r\n      }\r\n      \r\n      if (state.selectedCards.length >= 2) return state;\r\n      return {\r\n        ...state,\r\n        selectedCards: [...state.selectedCards, action.payload]\r\n      };\r\n\r\n    case 'CHECK_MATCH':\r\n      const [first, second] = state.selectedCards;\r\n      const isMatch = first.value === second.value;\r\n      const currentScore = state.players[state.currentPlayer].score;\r\n      const matchPoints = 10;\r\n      const penaltyPoints = Math.min(currentScore, 2); \r\n\r\n      return {\r\n        ...state,\r\n        cards: state.cards.map(card => \r\n          isMatch && (card.id === first.id || card.id === second.id)\r\n            ? { ...card, matched: true }\r\n            : card\r\n        ),\r\n        players: {\r\n          ...state.players,\r\n          [state.currentPlayer]: {\r\n            ...state.players[state.currentPlayer],\r\n            score: currentScore + (isMatch ? matchPoints : -penaltyPoints),\r\n            matches: isMatch ? state.players[state.currentPlayer].matches + 1 : state.players[state.currentPlayer].matches\r\n          }\r\n        },\r\n        currentPlayer: state.gameMode === 'multi' && !isMatch\r\n          ? (state.currentPlayer === 1 ? 2 : 1)\r\n          : state.currentPlayer,\r\n        selectedCards: []\r\n      };\r\n\r\n    case 'UPDATE_TIMER':\r\n      if (state.turnTimer <= 0) {\r\n        const currentPlayer = state.players[state.currentPlayer];\r\n        const newScore = {\r\n          playerName: state.gameMode === 'single' ? 'You' : currentPlayer.name,\r\n          score: currentPlayer.score,\r\n          date: new Date().toISOString(),\r\n          mode: state.gameMode,\r\n          id: Date.now() // Add unique ID to prevent duplicates\r\n        };\r\n\r\n        // Get existing scores\r\n        const savedScores = JSON.parse(\r\n          localStorage.getItem('memory-game-scores') || \r\n          '{\"single\":[], \"multi\":[]}'\r\n        );\r\n\r\n        // Check for duplicates and add new score\r\n        const currentModeScores = savedScores[state.gameMode];\r\n        if (!currentModeScores.some(score => score.id === newScore.id)) {\r\n          currentModeScores.push(newScore);\r\n          currentModeScores.sort((a, b) => b.score - a.score);\r\n          savedScores[state.gameMode] = currentModeScores.slice(0, 10);\r\n          localStorage.setItem('memory-game-scores', JSON.stringify(savedScores));\r\n        }\r\n\r\n        return {\r\n          ...state,\r\n          isPlaying: false,\r\n          gameOver: true,\r\n          winner: {\r\n            name: state.gameMode === 'single' ? 'You' : currentPlayer.name,\r\n            score: currentPlayer.score\r\n          },\r\n          highScores: savedScores\r\n        };\r\n      }\r\n      return { ...state, turnTimer: state.turnTimer - 1 };\r\n\r\n    case 'END_GAME':\r\n      const winner = state.gameMode === 'multi' \r\n        ? state.players[1].score > state.players[2].score \r\n          ? state.players[1] \r\n          : state.players[2]\r\n        : state.players[1];\r\n\r\n      const newScore = {\r\n        playerName: winner.name,\r\n        score: winner.score,\r\n        date: new Date().toISOString(),\r\n        mode: state.gameMode\r\n      };\r\n\r\n      // Save to localStorage\r\n      const savedScores = JSON.parse(localStorage.getItem('memory-game-scores') || '{\"single\":[], \"multi\":[]}');\r\n      savedScores[state.gameMode].push(newScore);\r\n      savedScores[state.gameMode].sort((a, b) => b.score - a.score);\r\n      savedScores[state.gameMode] = savedScores[state.gameMode].slice(0, 10);\r\n      localStorage.setItem('memory-game-scores', JSON.stringify(savedScores));\r\n\r\n      return {\r\n        ...state,\r\n        isPlaying: false,\r\n        gameOver: true,\r\n        winner: {\r\n          name: winner.name,\r\n          score: winner.score\r\n        },\r\n        highScores: savedScores\r\n      };\r\n\r\n    case 'PLAY_AGAIN':\r\n      return {\r\n        ...initialState,\r\n        gameMode: state.gameMode,\r\n        highScores: state.highScores,\r\n        isPlaying: true,\r\n        cards: generateCards(),\r\n      };\r\n\r\n    case 'SYNC_SCORES':\r\n      return {\r\n        ...state,\r\n        highScores: action.payload\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const GameProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(gameReducer, initialState);\r\n\r\n  // Efecto para sincronizar puntajes\r\n  useEffect(() => {\r\n    const loadScores = () => {\r\n      const savedScores = JSON.parse(\r\n        localStorage.getItem('memory-game-scores') || \r\n        '{\"single\":[], \"multi\":[]}'\r\n      );\r\n      dispatch({\r\n        type: 'SYNC_SCORES',\r\n        payload: savedScores\r\n      });\r\n    };\r\n\r\n    window.addEventListener('storage', loadScores);\r\n    loadScores(); // Carga inicial\r\n\r\n    return () => window.removeEventListener('storage', loadScores);\r\n  }, []);\r\n\r\n  return (\r\n    <GameContext.Provider value={{ state, dispatch }}>\r\n      {children}\r\n    </GameContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}