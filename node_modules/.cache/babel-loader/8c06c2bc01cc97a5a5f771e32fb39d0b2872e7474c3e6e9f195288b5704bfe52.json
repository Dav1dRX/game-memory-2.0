{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\David Maguire\\\\gaming\\\\src\\\\context\\\\GameContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer } from 'react';\nimport { emojis } from '../utils/gameUtils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  isPlaying: false,\n  gameMode: null,\n  // 'single' or 'multi'\n  currentPlayer: 1,\n  players: {\n    1: {\n      name: 'Player 1',\n      score: 0,\n      matches: 0\n    },\n    2: {\n      name: 'Player 2',\n      score: 0,\n      matches: 0\n    }\n  },\n  cards: [],\n  selectedCards: [],\n  turnTimer: 30,\n  highScores: {\n    single: [],\n    multi: []\n  }\n};\nexport const GameContext = /*#__PURE__*/createContext();\nexport const useGame = () => {\n  _s();\n  return useContext(GameContext);\n};\n_s(useGame, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nconst gameReducer = (state, action) => {\n  switch (action.type) {\n    case 'START_GAME':\n      const shuffledEmojis = [...emojis, ...emojis].sort(() => Math.random() - 0.5).map((emoji, index) => ({\n        id: index,\n        value: emoji,\n        matched: false\n      }));\n      return {\n        ...state,\n        isPlaying: true,\n        gameMode: action.payload.mode,\n        cards: shuffledEmojis,\n        timer: 0,\n        currentPlayer: 1,\n        turnTimer: 30,\n        selectedCards: []\n      };\n    case 'SELECT_CARD':\n      // Prevent selecting more than 2 cards\n      if (state.selectedCards.length >= 2) return state;\n      // Prevent selecting already matched or selected cards\n      if (state.selectedCards.find(c => c.id === action.payload.id) || state.cards.find(c => c.id === action.payload.id).matched) {\n        return state;\n      }\n      const newSelectedCards = [...state.selectedCards, action.payload];\n      if (newSelectedCards.length === 2) {\n        setTimeout(() => {\n          dispatch({\n            type: 'CHECK_MATCH'\n          });\n        }, 1000);\n      }\n      return {\n        ...state,\n        selectedCards: newSelectedCards\n      };\n    case 'CHECK_MATCH':\n      const [first, second] = state.selectedCards;\n      const isMatch = first.value === second.value;\n      const currentPlayerScore = state.players[state.currentPlayer].score;\n      const matchPoints = 10;\n      const missPoints = -2;\n      return {\n        ...state,\n        cards: state.cards.map(card => isMatch && (card.id === first.id || card.id === second.id) ? {\n          ...card,\n          matched: true\n        } : card),\n        players: {\n          ...state.players,\n          [state.currentPlayer]: {\n            ...state.players[state.currentPlayer],\n            score: currentPlayerScore + (isMatch ? matchPoints : missPoints),\n            matches: isMatch ? state.players[state.currentPlayer].matches + 1 : state.players[state.currentPlayer].matches\n          }\n        },\n        currentPlayer: state.gameMode === 'multi' && !isMatch ? state.currentPlayer === 1 ? 2 : 1 : state.currentPlayer,\n        selectedCards: []\n      };\n    case 'UPDATE_TIMER':\n      const newTimer = state.turnTimer - 1;\n\n      // Check if game should end\n      if (newTimer < 0) {\n        return {\n          ...state,\n          isPlaying: false,\n          gameOver: true\n        };\n      }\n      return {\n        ...state,\n        turnTimer: newTimer\n      };\n    case 'END_GAME':\n      const winner = state.gameMode === 'multi' ? state.players[1].score > state.players[2].score ? state.players[1] : state.players[2] : state.players[1];\n\n      // Save score to appropriate list\n      const newScore = {\n        playerName: winner.name,\n        score: winner.score,\n        date: new Date().toISOString(),\n        mode: state.gameMode\n      };\n      return {\n        ...state,\n        isPlaying: false,\n        gameOver: true,\n        winner,\n        highScores: {\n          ...state.highScores,\n          [state.gameMode]: [...(state.highScores[state.gameMode] || []), newScore].sort((a, b) => b.score - a.score).slice(0, 10)\n        }\n      };\n    default:\n      return state;\n  }\n};\nexport const GameProvider = ({\n  children\n}) => {\n  _s2();\n  const [state, dispatch] = useReducer(gameReducer, initialState);\n  return /*#__PURE__*/_jsxDEV(GameContext.Provider, {\n    value: {\n      state,\n      dispatch\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 5\n  }, this);\n};\n_s2(GameProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n_c = GameProvider;\nvar _c;\n$RefreshReg$(_c, \"GameProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","emojis","jsxDEV","_jsxDEV","initialState","isPlaying","gameMode","currentPlayer","players","name","score","matches","cards","selectedCards","turnTimer","highScores","single","multi","GameContext","useGame","_s","gameReducer","state","action","type","shuffledEmojis","sort","Math","random","map","emoji","index","id","value","matched","payload","mode","timer","length","find","c","newSelectedCards","setTimeout","dispatch","first","second","isMatch","currentPlayerScore","matchPoints","missPoints","card","newTimer","gameOver","winner","newScore","playerName","date","Date","toISOString","a","b","slice","GameProvider","children","_s2","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/David Maguire/gaming/src/context/GameContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer } from 'react';\r\nimport { emojis } from '../utils/gameUtils';\r\n\r\nconst initialState = {\r\n  isPlaying: false,\r\n  gameMode: null, // 'single' or 'multi'\r\n  currentPlayer: 1,\r\n  players: {\r\n    1: { name: 'Player 1', score: 0, matches: 0 },\r\n    2: { name: 'Player 2', score: 0, matches: 0 }\r\n  },\r\n  cards: [],\r\n  selectedCards: [],\r\n  turnTimer: 30,\r\n  highScores: {\r\n    single: [],\r\n    multi: []\r\n  }\r\n};\r\n\r\nexport const GameContext = createContext();\r\n\r\nexport const useGame = () => useContext(GameContext);\r\n\r\nconst gameReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'START_GAME':\r\n      const shuffledEmojis = [...emojis, ...emojis]\r\n        .sort(() => Math.random() - 0.5)\r\n        .map((emoji, index) => ({\r\n          id: index,\r\n          value: emoji,\r\n          matched: false\r\n        }));\r\n\r\n      return {\r\n        ...state,\r\n        isPlaying: true,\r\n        gameMode: action.payload.mode,\r\n        cards: shuffledEmojis,\r\n        timer: 0,\r\n        currentPlayer: 1,\r\n        turnTimer: 30,\r\n        selectedCards: []\r\n      };\r\n\r\n    case 'SELECT_CARD':\r\n      // Prevent selecting more than 2 cards\r\n      if (state.selectedCards.length >= 2) return state;\r\n      // Prevent selecting already matched or selected cards\r\n      if (state.selectedCards.find(c => c.id === action.payload.id) || \r\n          state.cards.find(c => c.id === action.payload.id).matched) {\r\n        return state;\r\n      }\r\n      \r\n      const newSelectedCards = [...state.selectedCards, action.payload];\r\n      if (newSelectedCards.length === 2) {\r\n        setTimeout(() => {\r\n          dispatch({ type: 'CHECK_MATCH' });\r\n        }, 1000);\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        selectedCards: newSelectedCards\r\n      };\r\n\r\n    case 'CHECK_MATCH':\r\n      const [first, second] = state.selectedCards;\r\n      const isMatch = first.value === second.value;\r\n      const currentPlayerScore = state.players[state.currentPlayer].score;\r\n      const matchPoints = 10;\r\n      const missPoints = -2;\r\n\r\n      return {\r\n        ...state,\r\n        cards: state.cards.map(card => \r\n          isMatch && (card.id === first.id || card.id === second.id)\r\n            ? { ...card, matched: true }\r\n            : card\r\n        ),\r\n        players: {\r\n          ...state.players,\r\n          [state.currentPlayer]: {\r\n            ...state.players[state.currentPlayer],\r\n            score: currentPlayerScore + (isMatch ? matchPoints : missPoints),\r\n            matches: isMatch \r\n              ? state.players[state.currentPlayer].matches + 1 \r\n              : state.players[state.currentPlayer].matches\r\n          }\r\n        },\r\n        currentPlayer: state.gameMode === 'multi' && !isMatch\r\n          ? (state.currentPlayer === 1 ? 2 : 1)\r\n          : state.currentPlayer,\r\n        selectedCards: []\r\n      };\r\n\r\n    case 'UPDATE_TIMER':\r\n      const newTimer = state.turnTimer - 1;\r\n      \r\n      // Check if game should end\r\n      if (newTimer < 0) {\r\n        return {\r\n          ...state,\r\n          isPlaying: false,\r\n          gameOver: true\r\n        };\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        turnTimer: newTimer\r\n      };\r\n\r\n    case 'END_GAME':\r\n      const winner = state.gameMode === 'multi' \r\n        ? state.players[1].score > state.players[2].score \r\n          ? state.players[1] \r\n          : state.players[2]\r\n        : state.players[1];\r\n\r\n      // Save score to appropriate list\r\n      const newScore = {\r\n        playerName: winner.name,\r\n        score: winner.score,\r\n        date: new Date().toISOString(),\r\n        mode: state.gameMode\r\n      };\r\n\r\n      return {\r\n        ...state,\r\n        isPlaying: false,\r\n        gameOver: true,\r\n        winner,\r\n        highScores: {\r\n          ...state.highScores,\r\n          [state.gameMode]: [\r\n            ...state.highScores[state.gameMode] || [],\r\n            newScore\r\n          ].sort((a, b) => b.score - a.score).slice(0, 10)\r\n        }\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const GameProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(gameReducer, initialState);\r\n  \r\n  return (\r\n    <GameContext.Provider value={{ state, dispatch }}>\r\n      {children}\r\n    </GameContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}