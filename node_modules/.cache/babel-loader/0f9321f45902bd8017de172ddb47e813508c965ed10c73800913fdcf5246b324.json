{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\David Maguire\\\\gaming\\\\src\\\\context\\\\GameContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer } from 'react';\nimport { generateCards } from '../utils/gameUtils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  isPlaying: false,\n  gameMode: null,\n  currentPlayer: 1,\n  players: {\n    1: {\n      name: 'Player 1',\n      score: 0,\n      matches: 0\n    },\n    2: {\n      name: 'Player 2',\n      score: 0,\n      matches: 0\n    }\n  },\n  cards: [],\n  selectedCards: [],\n  turnTimer: 30,\n  highScores: {\n    single: [],\n    multi: []\n  }\n};\nexport const GameContext = /*#__PURE__*/createContext();\nexport const useGame = () => {\n  _s();\n  return useContext(GameContext);\n};\n_s(useGame, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nconst gameReducer = (state, action) => {\n  switch (action.type) {\n    case 'START_GAME':\n      return {\n        ...initialState,\n        isPlaying: true,\n        gameOver: false,\n        // Explicitly reset gameOver\n        gameMode: action.payload.mode,\n        cards: generateCards(),\n        highScores: state.highScores,\n        // Preserve high scores\n        players: {\n          1: {\n            id: 1,\n            name: action.payload.mode === 'single' ? 'Player' : 'Player 1',\n            score: 0,\n            matches: 0\n          },\n          ...(action.payload.mode === 'multi' && {\n            2: {\n              id: 2,\n              name: 'Player 2',\n              score: 0,\n              matches: 0\n            }\n          })\n        }\n      };\n    case 'RESET_GAME':\n      return {\n        ...initialState,\n        gameMode: state.gameMode,\n        highScores: state.highScores // Preserve high scores\n      };\n    case 'SELECT_CARD':\n      if (state.selectedCards.length >= 2) return state;\n      return {\n        ...state,\n        selectedCards: [...state.selectedCards, action.payload]\n      };\n    case 'CHECK_MATCH':\n      const [first, second] = state.selectedCards;\n      const isMatch = first.value === second.value;\n      const currentScore = state.players[state.currentPlayer].score;\n      const matchPoints = 10;\n      const penaltyPoints = Math.min(currentScore, 2); // Never go below 0\n\n      return {\n        ...state,\n        cards: state.cards.map(card => isMatch && (card.id === first.id || card.id === second.id) ? {\n          ...card,\n          matched: true\n        } : card),\n        players: {\n          ...state.players,\n          [state.currentPlayer]: {\n            ...state.players[state.currentPlayer],\n            score: currentScore + (isMatch ? matchPoints : -penaltyPoints),\n            matches: isMatch ? state.players[state.currentPlayer].matches + 1 : state.players[state.currentPlayer].matches\n          }\n        },\n        currentPlayer: state.gameMode === 'multi' && !isMatch ? state.currentPlayer === 1 ? 2 : 1 : state.currentPlayer,\n        selectedCards: []\n      };\n    case 'UPDATE_TIMER':\n      if (state.turnTimer <= 0) {\n        const currentPlayer = state.players[state.currentPlayer];\n        const newScore = {\n          playerName: state.gameMode === 'single' ? 'You' : currentPlayer.name,\n          score: currentPlayer.score,\n          date: new Date().toISOString(),\n          mode: state.gameMode,\n          id: Date.now() // Add unique ID to prevent duplicates\n        };\n\n        // Get existing scores\n        const savedScores = JSON.parse(localStorage.getItem('memory-game-scores') || '{\"single\":[], \"multi\":[]}');\n\n        // Check for duplicates and add new score\n        const currentModeScores = savedScores[state.gameMode];\n        if (!currentModeScores.some(score => score.id === newScore.id)) {\n          currentModeScores.push(newScore);\n          currentModeScores.sort((a, b) => b.score - a.score);\n          savedScores[state.gameMode] = currentModeScores.slice(0, 10);\n          localStorage.setItem('memory-game-scores', JSON.stringify(savedScores));\n        }\n        return {\n          ...state,\n          isPlaying: false,\n          gameOver: true,\n          winner: {\n            name: state.gameMode === 'single' ? 'You' : currentPlayer.name,\n            score: currentPlayer.score\n          },\n          highScores: savedScores\n        };\n      }\n      return {\n        ...state,\n        turnTimer: state.turnTimer - 1\n      };\n    case 'END_GAME':\n      const winner = state.gameMode === 'multi' ? state.players[1].score > state.players[2].score ? state.players[1] : state.players[2] : state.players[1];\n      const newScore = {\n        playerName: winner.name,\n        score: winner.score,\n        date: new Date().toISOString(),\n        mode: state.gameMode\n      };\n\n      // Save to localStorage\n      const savedScores = JSON.parse(localStorage.getItem('memory-game-scores') || '{\"single\":[], \"multi\":[]}');\n      savedScores[state.gameMode].push(newScore);\n      savedScores[state.gameMode].sort((a, b) => b.score - a.score);\n      savedScores[state.gameMode] = savedScores[state.gameMode].slice(0, 10);\n      localStorage.setItem('memory-game-scores', JSON.stringify(savedScores));\n      return {\n        ...state,\n        isPlaying: false,\n        gameOver: true,\n        winner: {\n          name: winner.name,\n          score: winner.score\n        },\n        highScores: savedScores\n      };\n    case 'PLAY_AGAIN':\n      return {\n        ...initialState,\n        gameMode: state.gameMode,\n        highScores: state.highScores,\n        isPlaying: true,\n        cards: generateCards()\n      };\n    default:\n      return state;\n  }\n};\nexport const GameProvider = ({\n  children\n}) => {\n  _s2();\n  const [state, dispatch] = useReducer(gameReducer, initialState);\n  return /*#__PURE__*/_jsxDEV(GameContext.Provider, {\n    value: {\n      state,\n      dispatch\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 183,\n    columnNumber: 5\n  }, this);\n};\n_s2(GameProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n_c = GameProvider;\nvar _c;\n$RefreshReg$(_c, \"GameProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","generateCards","jsxDEV","_jsxDEV","initialState","isPlaying","gameMode","currentPlayer","players","name","score","matches","cards","selectedCards","turnTimer","highScores","single","multi","GameContext","useGame","_s","gameReducer","state","action","type","gameOver","payload","mode","id","length","first","second","isMatch","value","currentScore","matchPoints","penaltyPoints","Math","min","map","card","matched","newScore","playerName","date","Date","toISOString","now","savedScores","JSON","parse","localStorage","getItem","currentModeScores","some","push","sort","a","b","slice","setItem","stringify","winner","GameProvider","children","_s2","dispatch","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/David Maguire/gaming/src/context/GameContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer } from 'react';\r\nimport { generateCards } from '../utils/gameUtils';\r\n\r\nconst initialState = {\r\n  isPlaying: false,\r\n  gameMode: null,\r\n  currentPlayer: 1,\r\n  players: {\r\n    1: { name: 'Player 1', score: 0, matches: 0 },\r\n    2: { name: 'Player 2', score: 0, matches: 0 }\r\n  },\r\n  cards: [],\r\n  selectedCards: [],\r\n  turnTimer: 30,\r\n  highScores: {\r\n    single: [],\r\n    multi: []\r\n  }\r\n};\r\n\r\nexport const GameContext = createContext();\r\n\r\nexport const useGame = () => useContext(GameContext);\r\n\r\nconst gameReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'START_GAME':\r\n      return {\r\n        ...initialState,\r\n        isPlaying: true,\r\n        gameOver: false, // Explicitly reset gameOver\r\n        gameMode: action.payload.mode,\r\n        cards: generateCards(),\r\n        highScores: state.highScores, // Preserve high scores\r\n        players: {\r\n          1: {\r\n            id: 1,\r\n            name: action.payload.mode === 'single' ? 'Player' : 'Player 1',\r\n            score: 0,\r\n            matches: 0\r\n          },\r\n          ...(action.payload.mode === 'multi' && {\r\n            2: {\r\n              id: 2,\r\n              name: 'Player 2',\r\n              score: 0,\r\n              matches: 0\r\n            }\r\n          })\r\n        }\r\n      };\r\n\r\n    case 'RESET_GAME':\r\n      return {\r\n        ...initialState,\r\n        gameMode: state.gameMode,\r\n        highScores: state.highScores // Preserve high scores\r\n      };\r\n\r\n    case 'SELECT_CARD':\r\n      if (state.selectedCards.length >= 2) return state;\r\n      return {\r\n        ...state,\r\n        selectedCards: [...state.selectedCards, action.payload]\r\n      };\r\n\r\n    case 'CHECK_MATCH':\r\n      const [first, second] = state.selectedCards;\r\n      const isMatch = first.value === second.value;\r\n      const currentScore = state.players[state.currentPlayer].score;\r\n      const matchPoints = 10;\r\n      const penaltyPoints = Math.min(currentScore, 2); // Never go below 0\r\n\r\n      return {\r\n        ...state,\r\n        cards: state.cards.map(card => \r\n          isMatch && (card.id === first.id || card.id === second.id)\r\n            ? { ...card, matched: true }\r\n            : card\r\n        ),\r\n        players: {\r\n          ...state.players,\r\n          [state.currentPlayer]: {\r\n            ...state.players[state.currentPlayer],\r\n            score: currentScore + (isMatch ? matchPoints : -penaltyPoints),\r\n            matches: isMatch ? state.players[state.currentPlayer].matches + 1 : state.players[state.currentPlayer].matches\r\n          }\r\n        },\r\n        currentPlayer: state.gameMode === 'multi' && !isMatch\r\n          ? (state.currentPlayer === 1 ? 2 : 1)\r\n          : state.currentPlayer,\r\n        selectedCards: []\r\n      };\r\n\r\n    case 'UPDATE_TIMER':\r\n      if (state.turnTimer <= 0) {\r\n        const currentPlayer = state.players[state.currentPlayer];\r\n        const newScore = {\r\n          playerName: state.gameMode === 'single' ? 'You' : currentPlayer.name,\r\n          score: currentPlayer.score,\r\n          date: new Date().toISOString(),\r\n          mode: state.gameMode,\r\n          id: Date.now() // Add unique ID to prevent duplicates\r\n        };\r\n\r\n        // Get existing scores\r\n        const savedScores = JSON.parse(\r\n          localStorage.getItem('memory-game-scores') || \r\n          '{\"single\":[], \"multi\":[]}'\r\n        );\r\n\r\n        // Check for duplicates and add new score\r\n        const currentModeScores = savedScores[state.gameMode];\r\n        if (!currentModeScores.some(score => score.id === newScore.id)) {\r\n          currentModeScores.push(newScore);\r\n          currentModeScores.sort((a, b) => b.score - a.score);\r\n          savedScores[state.gameMode] = currentModeScores.slice(0, 10);\r\n          localStorage.setItem('memory-game-scores', JSON.stringify(savedScores));\r\n        }\r\n\r\n        return {\r\n          ...state,\r\n          isPlaying: false,\r\n          gameOver: true,\r\n          winner: {\r\n            name: state.gameMode === 'single' ? 'You' : currentPlayer.name,\r\n            score: currentPlayer.score\r\n          },\r\n          highScores: savedScores\r\n        };\r\n      }\r\n      return { ...state, turnTimer: state.turnTimer - 1 };\r\n\r\n    case 'END_GAME':\r\n      const winner = state.gameMode === 'multi' \r\n        ? state.players[1].score > state.players[2].score \r\n          ? state.players[1] \r\n          : state.players[2]\r\n        : state.players[1];\r\n\r\n      const newScore = {\r\n        playerName: winner.name,\r\n        score: winner.score,\r\n        date: new Date().toISOString(),\r\n        mode: state.gameMode\r\n      };\r\n\r\n      // Save to localStorage\r\n      const savedScores = JSON.parse(localStorage.getItem('memory-game-scores') || '{\"single\":[], \"multi\":[]}');\r\n      savedScores[state.gameMode].push(newScore);\r\n      savedScores[state.gameMode].sort((a, b) => b.score - a.score);\r\n      savedScores[state.gameMode] = savedScores[state.gameMode].slice(0, 10);\r\n      localStorage.setItem('memory-game-scores', JSON.stringify(savedScores));\r\n\r\n      return {\r\n        ...state,\r\n        isPlaying: false,\r\n        gameOver: true,\r\n        winner: {\r\n          name: winner.name,\r\n          score: winner.score\r\n        },\r\n        highScores: savedScores\r\n      };\r\n\r\n    case 'PLAY_AGAIN':\r\n      return {\r\n        ...initialState,\r\n        gameMode: state.gameMode,\r\n        highScores: state.highScores,\r\n        isPlaying: true,\r\n        cards: generateCards(),\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const GameProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(gameReducer, initialState);\r\n  return (\r\n    <GameContext.Provider value={{ state, dispatch }}>\r\n      {children}\r\n    </GameContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}